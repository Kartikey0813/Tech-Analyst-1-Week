Inserting Documents in a MongoDB Collection
Review the following code, which demonstrates how to insert a single document and multiple documents into a collection.

Insert a Single Document
Use insertOne() to insert a document into a collection. Within the parentheses of insertOne(), include an object that contains the document data. Here's an example:

db.grades.insertOne({
  student_id: 654321,
  products: [
    {
      type: "exam",
      score: 90,
    },
    {
      type: "homework",
      score: 59,
    },
    {
      type: "quiz",
      score: 75,
    },
    {
      type: "homework",
      score: 88,
    },
  ],
  class_id: 550,
})
Insert Multiple Documents
Use insertMany() to insert multiple documents at once. Within insertMany(), include the documents within an array. Each document should be separated by a comma. Here's an example:

db.grades.insertMany([
  {
    student_id: 546789,
    products: [
      {
        type: "quiz",
        score: 50,
      },
      {
        type: "homework",
        score: 70,
      },
      {
        type: "quiz",
        score: 66,
      },
      {
        type: "exam",
        score: 70,
      },
    ],
    class_id: 551,
  },
  {
    student_id: 777777,
    products: [
      {
        type: "exam",
        score: 83,
      },
      {
        type: "quiz",
        score: 59,
      },
      {
        type: "quiz",
        score: 72,
      },
      {
        type: "quiz",
        score: 67,
      },
    ],
    class_id: 550,
  },
  {
    student_id: 223344,
    products: [
      {
        type: "exam",
        score: 45,
      },
      {
        type: "homework",
        score: 39,
      },
      {
        type: "quiz",
        score: 40,
      },
      {
        type: "homework",
        score: 88,
      },
    ],
    class_id: 551,
  },
])


Finding Documents in a MongoDB Collection
    Review the following code, which demonstrates how to query documents in MongoDB.

Find a Single Document with Equality
    To find a single document matching a condition, use the findOne() command with the $eq operator.

Here's an example:

    db.books.findOne({title: {$eq: "Brave New World"}})


For equalities, you can use the implicit syntax of $eq to shorten your query:

    db.books.findOne({title: "Brave New World"})

Find Multiple Documents with Equality
    To find multiple documents matching a condition, use the find() command. You can use the $eq operator or the implicit syntax. Here’s an example of the latter:

    db.books.find({publisher: "MongoDB Press"})


Find a Document by Using the $in Operator
    Use the $in operator to select documents where the value of a field equals any value in the specified array. Here's an example:

    db.zips.find({ city: { $in: ["PHOENIX", "CHICAGO"] } })

Updating MongoDB Documents by Using updateOne()
    The updateOne() method accepts a filter document, an update document, and an optional options object. MongoDB provides update operators and options to help you update documents. In this section, we'll cover three of them: $set, upsert, and $push.

$set
    The $set operator replaces the value of a field with the specified value, as shown in the following code:

    db.podcasts.updateOne(
    {
        _id: ObjectId("5e8f8f8f8f8f8f8f8f8f8f8"),
    },

    {
        $set: {
        subscribers: 98562,
        },
    }
    )


upsert
    The upsert option creates a new document if no documents match the filtered criteria. Here's an example:

    db.podcasts.updateOne(
    { title: "The Developer Hub" },
    { $set: { topics: ["databases", "MongoDB"] } },
    { upsert: true }
    )


$push
    The $push operator adds a new value to the hosts array field. Here's an example:

    db.podcasts.updateOne(
    { _id: ObjectId("5e8f8f8f8f8f8f8f8f8f8f8") },
    { $push: { hosts: "Nic Raboy" } }
    )

Updating MongoDB Documents by Using updateMany()
    To update multiple documents, use the updateMany() method. This method accepts a filter document, an update document, and an optional options object. The following code shows an example:

    db.books.updateMany(
    { publishedDate: { $lt: new Date("2019-01-01") } },
    { $set: { status: "LEGACY" } }
    )

Deleting Documents in MongoDB
    To delete documents, use the deleteOne() or deleteMany() methods. Both methods accept a filter document and an options object.

Delete One Document
    The following code shows an example of the deleteOne() method:

    db.podcasts.deleteOne({ _id: Objectid("6282c9862acb966e76bbf20a") })

Delete Many Documents
    The following code shows an example of the deleteMany() method:

    db.podcasts.deleteMany({category: “crime”})

Finding Documents by Using Comparison Operators
    Review the following comparison operators: $gt, $lt, $lte, and $gte.

$gt
    Use the $gt operator to match documents with a field greater than the given value. For example:

    db.sales.find({ "items.price": { $gt: 50}})


$lt
    Use the $lt operator to match documents with a field less than the given value. For example:

    db.sales.find({ "items.price": { $lt: 50}})


$lte
    Use the $lte operator to match documents with a field less than or equal to the given value. For example:

    db.sales.find({ "customer.age": { $lte: 65}})


$gte
    Use the $gte operator to match documents with a field greater than or equal to the given value. For example:

    db.sales.find({ "customer.age": { $gte: 65}})


Finding Documents by Using Logical Operators
    Review the following logical operators: implicit $and, $or, and $and.

Find a Document by Using Implicit $and
    Use implicit $and to select documents that match multiple expressions. For example:

    db.routes.find({ "airline.name": "Southwest Airlines", stops: { $gte: 1 } })


Find a Document by Using the $or Operator
    Use the $or operator to select documents that match at least one of the included expressions. For example:

    db.routes.find({
    $or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }],
    })


Find a Document by Using the $and Operator
    Use the $and operator to use multiple $or expressions in your query.

    db.routes.find({
    $and: [
        { $or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }] },
        { $or: [{ "airline.name": "American Airlines" }, { airplane: 320 }] },
    ]
    })

Querying on Array Elements in MongoDB
    Review the following code, which demonstrates how to query array elements in MongoDB.

Find Documents with an Array That Contains a Specified Value
    In the following example, "InvestmentFund" is not enclosed in square brackets, so MongoDB returns all documents within the products array that contain the specified value.

    db.accounts.find({ products: "InvestmentFund"})


Find a Document by Using the $elemMatch Operator
    Use the $elemMatch operator to find all documents that contain the specified subdocument. For example:

    db.sales.find({
    items: {
        $elemMatch: { name: "laptop", price: { $gt: 800 }, quantity: { $gte: 1 } },
    },
    })

Sorting and Limiting Query Results in MongoDB
    Review the following code, which demonstrates how to sort and limit query results.

Sorting Results
    Use cursor.sort() to return query results in a specified order. Within the parentheses of sort(), include an object that specifies the field(s) to sort by and the order of the sort. Use 1 for ascending order, and -1 for descending order.

Syntax:
    db.collection.find(<query>).sort(<sort>)


Example:
    // Return data on all music companies, sorted alphabetically from A to Z.
    db.companies.find({ category_code: "music" }).sort({ name: 1 });
    To ensure documents are returned in a consistent order, include a field that contains unique values in the sort. An easy way to do this is to include the _id field in the sort. Here's an example:

// Return data on all music companies, sorted alphabetically from A to Z. Ensure consistent sort order
    db.companies.find({ category_code: "music" }).sort({ name: 1, _id: 1 });


Limiting Results
    Use cursor.limit() to specify the maximum number of documents the cursor will return. Within the parentheses of limit(), specify the maximum number of documents to return.
    Syntax:
    db.companies.find(<query>).limit(<number>)


Example:
    // Return the three music companies with the highest number of employees. Ensure consistent sort order.
    db.companies
    .find({ category_code: "music" })
    .sort({ number_of_employees: -1, _id: 1 })
    .limit(3);

Returning Specific Data from a Query in MongoDB
    Review the following code, which demonstrates how to return selected fields from a query.

Add a Projection Document
    To specify fields to include or exclude in the result set, add a projection document as the second parameter in the call to db.collection.find().

Syntax:

    db.collection.find( <query>, <projection> )


Include a Field
    To include a field, set its value to 1 in the projection document.

Syntax:
    db.collection.find( <query>, { <field> : 1 })


Example:
    // Return all restaurant inspections - business name, result, and _id fields only
    db.inspections.find(
    { sector: "Restaurant - 818" },
    { business_name: 1, result: 1 }
    )


Exclude a Field
    To exclude a field, set its value to 0 in the projection document.

Syntax:
    db.collection.find(query, { <field> : 0, <field>: 0 })


Example:
    // Return all inspections with result of "Pass" or "Warning" - exclude date and zip code
    db.inspections.find(
    { result: { $in: ["Pass", "Warning"] } },
    { date: 0, "address.zip": 0 }
    )


While the _id field is included by default, it can be suppressed by setting its value to 0 in any projection.
    // Return all restaurant inspections - business name and result fields only
    db.inspections.find(
    { sector: "Restaurant - 818" },
    { business_name: 1, result: 1, _id: 0 }
    )


Counting Documents in a MongoDB Collection
    Review the following code, which demonstrates how to count the number of documents that match a query.

Count Documents
    Use db.collection.countDocuments() to count the number of documents that match a query. countDocuments() takes two parameters: a query document and an options document.

Syntax:
    db.collection.countDocuments( <query>, <options> )


The query selects the documents to be counted.
    Examples:
    // Count number of docs in trip collection
    db.trips.countDocuments({})
    // Count number of trips over 120 minutes by subscribers
    db.trips.countDocuments({ tripduration: { $gt: 120 }, usertype: "Subscriber" })


