
Detailed Notes on Git and GitHub:

1. What is Git?
- Git is a distributed version control system for tracking changes in source code during software development.
- It allows multiple developers to work on a project simultaneously.
- Key features: branching, merging, distributed architecture, fast performance.

2. Basic Git Commands:
- `git init`: Initialize a new Git repository.
- `git clone <repo-url>`: Clone an existing repository.
- `git add <file>`: Stage changes for commit.
- `git commit -m "message"`: Commit staged changes.
- `git status`: Show the status of changes.
- `git log`: View commit history.
- `git branch`: List, create, or delete branches.
- `git merge <branch>`: Merge a branch into the current branch.
- `git pull`: Fetch and merge changes from remote.
- `git push`: Push local commits to remote repository.

3. What is GitHub?
- GitHub is a cloud-based hosting service for Git repositories.
- It provides collaboration features like pull requests, issues, code reviews, and project management.
- GitHub enables open-source contributions and team workflows.

4. Common GitHub Features:
- Repositories: Store code and track changes.
- Forks: Create a personal copy of someone else's repository.
- Pull Requests: Propose changes to a repository.
- Issues: Track bugs and feature requests.
- Actions: Automate workflows (CI/CD).

5. Workflow Example:
- Fork a repository.
- Clone it locally.
- Create a new branch for your feature.
- Make changes and commit.
- Push the branch to GitHub.
- Create a pull request for review.

Resources:
- Official Git Documentation: https://git-scm.com/doc
- GitHub Guides: https://guides.github.com/
- GitHub Learning Lab: https://lab.github.com/
- Atlassian Git Tutorials: https://www.atlassian.com/git/tutorials
- FreeCodeCamp Git & GitHub Crash Course: https://www.freecodecamp.org/news/git-and-github-crash-


So here we are understanding some key features of git - 

Branching: Allows you to create separate lines of development, so you can work on new features or fixes without affecting the main codebase.

Merging: Combines changes from different branches into one, integrating work from multiple contributors.

Distributed Architecture: Every developer has a full copy of the repository, including its history, enabling offline work and better collaboration.

Fast Performance: Git is optimized for speed, making operations like committing, branching, and merging very quick, even for large projects.

Four types of statuses in Git - 

1. Untracked - This means a new file or folder has been added which git cannot track because it has not been added and commited yet. 

2. Modified - Some changes has been made to the codes without creation of any new files or folders. 

3. Staged - Where the file is ready to be commited. 

4. Unmodified - Where the file is not modified and everything is up to date. 